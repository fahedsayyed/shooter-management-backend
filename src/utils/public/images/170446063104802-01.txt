import React, { useEffect, useState } from "react";
import { Grid, MenuItem, FormControlLabel, Checkbox, Button, Card, FormGroup, Paper, FormControl, InputLabel, Select, OutlinedInput, FormHelperText } from "@mui/material";
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank";
import CheckBoxIcon from "@mui/icons-material/CheckBox";
import CustomFormLabel from "src/utils/theme-elements/CustomFormLabel";
import CustomSelect from "src/utils/theme-elements/CustomSelect";
import TableHead from "src/components/table-head";
import BackLink from "src/components/back-link";
import APP_ROUTES from "src/routes/routePaths";
import { Box, Stack } from "@mui/system";
import { useLocation, useParams } from "react-router";
import CustomTextField from "src/utils/theme-elements/CustomTextField";
import RemoveIcon from "@mui/icons-material/Remove";
import AddIcon from "@mui/icons-material/Add";
import BlankCard from "src/components/shared/BlankCard";
import { AppState, useSelector, useDispatch } from "../../../store/Store";
import { RequiredStar } from "src/components/required-star";
import validateForm, { generateErrorInitialState } from "src/utils/FormValidate";
import NumberDropdown from "src/components/NumberDropdown";
import { setEventData, updateFormData } from "src/store/eventgroups/addEventGroupFormSlice";
import { createEventGroup } from "../ChampionshipUtils/functionUtils";
import { notifyMessage } from "src/utils/toastNotify";

const AddEventGroup = () => {
  const [checked, setChecked] = useState();
  const dispatch = useDispatch();
  // const [dropdown, setDropdown] = useState("select category");
  const [targetGroupClicked, setTargetGroupClicked] = useState(false);

  const dropdownValue = useSelector((state: AppState) => state.dropdown.dropdownValue);
  const eventData = useSelector((state) => state.addEventGroupForm.eventData);
  // const seriesInputValues = useSelector((state) => state.addEventGroupForm.seriesInputValues);
  // const stageTitlesInputValues = useSelector((state) => state.addEventGroupForm.stageTitlesInputValues);
  const completeData = useSelector((state) => state.addEventGroupForm);
  console.log(dropdownValue, "dropdownValue", eventData, "eventData");
  console.log(dropdownValue, "from reducer");
  console.log(eventData, "event red");
  // console.log(seriesInputValues, stageTitlesInputValues, "from numberdropdown");
  console.log(completeData, "from final ");
  const { id } = useParams();
  const { state } = useLocation();
  const pageType = (state as { pageType: string | undefined })?.pageType;

  console.log(pageType, "add event");

  const dummyData = {
    eventName: "MAFC",
    eventType: "RIFLE",
    isMixed: false,
    numberOfShots: 10,
    maxShots: 15,
    seriesCount: 3,
    shotsInSeries: 20,
    seriesTitles: true,
    stageCount: 4,
    stageTitles: false,
  };

  const [editformData, setEditFormData] = useState<typeof dummyData>(dummyData);

  const [detail, setDetail] = React.useState<any>({
    competitionName: dropdownValue,
    eventName: "",
    eventType: "",
    isMixed: "",
    numberOfShots: "",
    maxShots: "",
    seriesCount: "",
    shotsInSeries: "",
    seriesTitles: "",
    stageCount: "",
    stageTitles: "",
    targetGroups: [{ target: "", record: "", sighter: "" }],
    matches: [
      { name: "Sample Event", match_no: "EV345" },
      { name: "test", match_no: "t123" },
    ],
  });

  const errorInitialState: any = generateErrorInitialState(detail);
  const [error, setError] = useState(errorInitialState);
  const { eventName, eventType, isMixed, numberOfShots, maxShots, seriesCount, shotsInSeries, seriesTitles, stageCount, stageTitles } = detail;
  console.log(detail, "detail");
  const wholeError = () => {
    // const newErrors = validateForm(detail);
    const newErrors = id ? validateForm(editformData) : validateForm(detail);
    setError(newErrors);
  };
  const checkError = (fieldName: any) => {
    const newErrors: any = validateForm({ [fieldName]: detail[fieldName] });
    setError((prevErrors: any) => ({ ...prevErrors, [fieldName]: newErrors[fieldName] }));
  };
  const createFieldHandlers = (fieldName: string) => ({
    onBlur: () => checkError(fieldName),
  });

  useEffect(() => {
    console.log(id, "id is there");
    if (id) {
      // setFormData(editformData);
      const fetchCompetitionDetails = async () => {
        try {
          setEditFormData((prevData) => ({ ...prevData, ...dummyData }));
        } catch (error) {
          console.error("Error fetching competition details:", error);
        }
      };

      fetchCompetitionDetails();
    }
  }, [id]);

  const handleNext: any = async (e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const editCheck = Object.values(editformData).every((e) => e !== "");

    try {
      if (id) {
        if (!editCheck) {
          notifyMessage.error("Check all mandatory fields");
          wholeError();
        } else {
          notifyMessage.success("Draft Saved");
          console.log("send data");
        }
      } else if (!eventName && !eventType && !isMixed && !numberOfShots && !maxShots && !seriesCount && !shotsInSeries && !seriesTitles && !stageCount && !stageTitles) {
        notifyMessage.error("Check all mandatory fields");
        wholeError();
      } else {
        await createEventGroup(detail);
        dispatch(updateFormData(eventData));
        notifyMessage.success("EventGroup created successfully");
        console.log("send data");
      }
    } catch (error) {
      console.error("Error:", error);
    }
  };

  const targetOptions = [
    { value: "10mpistol", label: "10m PISTOL" },
    { value: "10mrifle", label: "10m RIFLE" },
    { value: "25mduelling", label: "25m DUELLING" },
    { value: "25mprecisions", label: "25m PRECISIONS" },
    { value: "50mrifle", label: "50m RIFLE" },
    { value: "claybird", label: "CLAY BIRD" },
    { value: "50mpistol", label: "50m PISTOL" },
  ];

  const firearmTypeOptions = [
    { value: "RIFLE", label: "RIFLE" },
    { value: "PISTOL", label: "PISTOL" },
    { value: "SHOTGUN", label: "SHOTGUN" },
    { value: "BIGBORE", label: "BIGBORE" },
  ];

  // const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  //   e.preventDefault();

  //   const { name, value } = e.target;

  //   dispatch(setEventData({ ...eventData, [name]: value }));

  //   if (name.startsWith("targetGroup")) {
  //     const index = parseInt(name.replace("targetGroup", ""), 10);
  //     setDetail((prevDetail: any) => ({
  //       ...prevDetail,
  //       targetGroups: prevDetail.targetGroups.map((group: any, i: number) => (i === index ? { ...group, [name]: value } : group)),
  //     }));
  //   } else {
  //     // Handle changes for other fields
  //     setDetail({ ...detail, [name]: value });
  //   }
  //   //setDetail({ ...detail, [name]: value });
  // };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    const { name, value } = e.target;

    if (name.startsWith("targetGroup")) {
      // Handle changes for targetGroups
      const index = parseInt(name.replace("targetGroup", ""), 10);
      setDetail((prevDetail: any) => ({
        ...prevDetail,
        targetGroups: prevDetail.targetGroups.map((group: any, i: number) => (i === index ? { ...group, [name]: value } : group)),
      }));
    } else {
      // Handle changes for other fields
      setDetail({ ...detail, [name]: value });
    }
  };

  const handleTargetGroupClick = () => {
    setTargetGroupClicked(true);
  };

  const [formData, setFormData] = React.useState<any>(() => {
    const storedState = localStorage.getItem("");

    return storedState
      ? JSON.parse(storedState)
      : {
          fireArms: [{ target: "", record: "", sighter: "" }],
        };
  });

  const handleAddFields = () => {
    setFormData((prev: any) => ({
      ...prev,
      fireArms: [...prev.fireArms, { target: "", record: "", sighter: "" }],
    }));
  };

  const handleRemoveFields = () => {
    if (formData.fireArms.length > 1) {
      setFormData((prev: any) => {
        const updatedFireArms = [...prev.fireArms];
        updatedFireArms.pop();

        return {
          ...prev,
          fireArms: updatedFireArms,
        };
      });
    }
  };

  const handleCheckValue: any = (e: any) => {
    const { name, checked } = e.target;
    dispatch(setEventData({ ...eventData, seriesTitles: checked, isMixed: checked, stageTitles: checked }));
    setChecked(checked);
    setDetail((prevDetail: any) => ({ ...prevDetail, [name]: checked }));
  };

  // const fireArmsChange = (index: any, field: any, value: any) => {
  //   setDetail((prev: any) => ({
  //     ...prev,
  //     targetGroups: prev.targetGroups.map((group: any, i: any) => (i === index ? { ...group, [field]: value } : group)),
  //   }));
  // };

  const fireArmsChange = (index: any, field: any, value: any) => {
    setDetail((prev: any) => ({
      ...prev,
      targetGroups: prev.targetGroups.map((group: any, i: any) => (i === index ? { ...group, [field]: value } : group)),
    }));
  };

  const getBackRoute = () => {
    if (pageType === "eventGroups") {
      return `${APP_ROUTES.EVENT_GROUP}`;
    } else {
      return `${APP_ROUTES.CHAMPIONS}`;
    }
  };

  return (
    <>
      <BackLink title={`Back to ${pageType === "eventGroups" ? "Event Groups" : "Championship"}`} route={getBackRoute()} />

      {/* <TableHead title="Add Event" /> */}
      <TableHead title={id ? "Edit Event Group" : "Add Event Group"} />
      <BlankCard>
        <form>
          <Grid container sx={{ padding: 1 }} spacing={3}>
            <Grid item xs={12}>
              <Grid container spacing={3}>
                <Grid item xs={12} lg={6}>
                  <CustomFormLabel htmlFor="events">Competitions</CustomFormLabel>

                  <CustomTextField fullWidth value={id ? dropdownValue : dropdownValue} disabled />
                </Grid>

                <Grid item xs={12} lg={6}>
                  <CustomFormLabel htmlFor="bi-eventgroupname">
                    {" "}
                    Group Name
                    <RequiredStar />
                  </CustomFormLabel>
                  <CustomTextField
                    sx={{ mt: 0 }}
                    id="bi-eventgroupname"
                    name="eventName"
                    placeholder="Enter Group Name"
                    onChange={handleChange}
                    fullWidth
                    value={id ? editformData.eventName : detail.eventName}
                    error={!!error.eventName}
                    helperText={error.eventName}
                    {...createFieldHandlers("eventName")}
                  />
                </Grid>

                <Grid item xs={12} lg={6}>
                  <FormControl error={!!error.eventType} fullWidth>
                    <CustomFormLabel htmlFor="event-type">
                      Event Type
                      <RequiredStar />
                    </CustomFormLabel>
                    <CustomSelect
                      sx={{ mt: 0 }}
                      id="event-type"
                      className="custom-select"
                      name="eventType"
                      value={id ? editformData.eventType : detail.eventType}
                      onChange={handleChange}
                      fullWidth
                      variant="outlined"
                      helperText={error.eventType}
                      {...createFieldHandlers("eventType")}
                    >
                      {firearmTypeOptions.map((type) => (
                        <MenuItem key={type.value} value={type.value}>
                          {type.label}
                        </MenuItem>
                      ))}
                    </CustomSelect>
                    {error.eventType && <FormHelperText>Select Event Type(this field is required)</FormHelperText>}
                  </FormControl>
                </Grid>

                <Grid item alignSelf="end" xs={6}>
                  <Stack direction="row" spacing={6} alignItems="center">
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                      <CustomFormLabel sx={{ marginTop: 0 }} htmlFor="fname-text">
                        Is mixed?
                      </CustomFormLabel>
                      <FormControlLabel
                        control={
                          <Checkbox
                            color="secondary"
                            icon={<CheckBoxOutlineBlankIcon fontSize="small" />}
                            checkedIcon={<CheckBoxIcon fontSize="small" />}
                            name="isMixed"
                            value={checked}
                            checked={detail.isMixed}
                            onClick={handleCheckValue}
                            sx={{ marginLeft: "5px" }}
                          />
                        }
                        label=""
                      />
                    </Box>
                  </Stack>
                </Grid>

                <Grid item xs={12} lg={6}>
                  <CustomFormLabel htmlFor="bi-shots">
                    {" "}
                    No of Shots
                    <RequiredStar />
                  </CustomFormLabel>
                  <CustomTextField
                    sx={{ mt: 0 }}
                    id="bi-shots"
                    name="numberOfShots"
                    placeholder="Enter No Of Shots"
                    onChange={handleChange}
                    fullWidth
                    value={id ? editformData.numberOfShots : detail.numberOfShots}
                    error={!!error.numberOfShots}
                    helperText={error.numberOfShots}
                    {...createFieldHandlers("numberOfShots")}
                  />
                </Grid>

                <Grid item xs={12} lg={6}>
                  <CustomFormLabel htmlFor="bi-maxvalue">
                    {" "}
                    Max Value
                    <RequiredStar />
                  </CustomFormLabel>
                  <CustomTextField
                    sx={{ mt: 0 }}
                    id="bi-maxvalue"
                    name="maxShots"
                    placeholder="Enter Max Value"
                    onChange={handleChange}
                    fullWidth
                    value={id ? editformData.maxShots : detail.maxShots}
                    error={!!error.maxShots}
                    helperText={error.maxShots}
                    {...createFieldHandlers("maxShots")}
                  />
                </Grid>

                <Grid item xs={12} lg={3}>
                  <CustomFormLabel htmlFor="bi-seriescount">
                    {" "}
                    Series Count
                    <RequiredStar />
                  </CustomFormLabel>
                  <CustomTextField
                    sx={{ mt: 0 }}
                    id="bi-seriescount"
                    name="seriesCount"
                    placeholder=""
                    fullWidth
                    type="number"
                    onChange={handleChange}
                    value={id ? editformData.seriesCount : detail.seriesCount}
                    error={!!error.seriesCount}
                    helperText={error.seriesCount}
                    {...createFieldHandlers("seriesCount")}
                  />
                </Grid>

                <Grid item xs={12} lg={3}>
                  <CustomFormLabel htmlFor="bi-shotinseries">
                    {" "}
                    Shots in series
                    <RequiredStar />
                  </CustomFormLabel>
                  <CustomTextField
                    sx={{ mt: 0 }}
                    id="bi-shotinseries"
                    name="shotsInSeries"
                    placeholder=""
                    fullWidth
                    type="number"
                    onChange={handleChange}
                    value={id ? editformData.shotsInSeries : detail.shotsInSeries}
                    error={!!error.shotsInSeries}
                    helperText={error.shotsInSeries}
                    {...createFieldHandlers("shotsInSeries")}
                  />
                </Grid>

                <Grid item alignSelf="end" xs={6} sx={{ marginTop: 2 }}>
                  <Stack direction="row" spacing={6} alignItems="center">
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                      <CustomFormLabel sx={{ marginTop: 0 }} htmlFor="fname-text">
                        Series Titles
                        <RequiredStar />
                      </CustomFormLabel>
                      <FormControlLabel
                        control={
                          <Checkbox
                            color="secondary"
                            icon={<CheckBoxOutlineBlankIcon fontSize="small" />}
                            checkedIcon={<CheckBoxIcon fontSize="small" />}
                            name="seriesTitles"
                            value={checked}
                            onClick={handleCheckValue}
                            sx={{ marginLeft: "5px" }}
                          />
                        }
                        label=""
                      />
                    </Box>
                  </Stack>
                  <NumberDropdown numberToShow={detail.seriesCount} field="seriesTitles" />
                </Grid>

                <Grid item xs={12} lg={3}>
                  <CustomFormLabel htmlFor="bi-stagecount">
                    {" "}
                    Stage Count
                    <RequiredStar />
                  </CustomFormLabel>
                  <CustomTextField
                    id="bi-stagecount"
                    sx={{ mt: 0 }}
                    name="stageCount"
                    placeholder=""
                    fullWidth
                    type="number"
                    onChange={handleChange}
                    value={id ? editformData.stageCount : detail.stageCount}
                    error={!!error.stageCount}
                    helperText={error.stageCount}
                    {...createFieldHandlers("stageCount")}
                  />
                </Grid>

                <Grid item alignSelf="end" xs={6} sx={{ marginTop: 2 }}>
                  <Stack direction="row" spacing={6} alignItems="center">
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                      <CustomFormLabel sx={{ marginTop: 0 }} htmlFor="fname-text">
                        Stage Titles
                        <RequiredStar />
                      </CustomFormLabel>

                      <FormControlLabel
                        control={
                          <Checkbox
                            color="secondary"
                            icon={<CheckBoxOutlineBlankIcon fontSize="small" />}
                            checkedIcon={<CheckBoxIcon fontSize="small" />}
                            name="stageTitle"
                            value={checked}
                            onClick={handleCheckValue}
                            sx={{ marginLeft: "5px" }}
                          />
                        }
                        label=""
                      />
                    </Box>
                  </Stack>
                  <NumberDropdown numberToShow={detail.stageCount} field="stageTitles" />
                </Grid>
              </Grid>
            </Grid>
          </Grid>

          <Button variant="contained" color="primary" onClick={handleTargetGroupClick} sx={{ marginTop: 3, ml: 2 }}>
            Target Group
          </Button>
          {targetGroupClicked && (
            <Grid item xs={12} lg={12}>
              <Card sx={{ boxShadow: 2 }}>
                <FormGroup sx={{ position: "relative" }}>
                  <Paper sx={{ background: "none", boxShadow: "none" }}>
                    <div style={{ display: "flex", width: "150px", alignItems: "center", position: "absolute", top: "-30px", right: "0px" }}>
                      <Button variant="outlined" sx={{ width: "20px", marginTop: 2, textAlign: "center", mr: 1 }} onClick={handleAddFields}>
                        <AddIcon />
                      </Button>
                      {formData.fireArms.length > 1 && (
                        <Button variant="outlined" sx={{ width: "20px", marginTop: 2, textAlign: "center", ml: 0.5 }} onClick={handleRemoveFields}>
                          <RemoveIcon />
                        </Button>
                      )}
                    </div>
                    {formData?.fireArms?.map((arms: any, i: any) => {
                      return (
                        <Grid container spacing={2} mt={1} key={i}>
                          <Grid item xs={12} lg={3}>
                            <FormControl fullWidth>
                              <InputLabel id="demo-multiple-name-label">Target</InputLabel>
                              <Select
                                labelId={`demo-multiple-name-label-${i}`}
                                id={`demo-multiple-name-${i}`}
                                name={`targetGroup${i}-target`}
                                value={arms.target}
                                onChange={(e: any) => fireArmsChange(i, "target", e.target.value)}
                                input={<OutlinedInput label="Target" />}
                                MenuProps={{
                                  PaperProps: {
                                    style: {
                                      width: 250,
                                    },
                                  },
                                }}
                              >
                                <MenuItem value="select" disabled>
                                  {" "}
                                  Please Select Target{" "}
                                </MenuItem>
                                {targetOptions.map((target) => (
                                  <MenuItem key={target.value} value={target.value}>
                                    {target.label}
                                  </MenuItem>
                                ))}
                              </Select>
                            </FormControl>
                          </Grid>
                          <Grid item xs={6} lg={4}>
                            <FormControl fullWidth>
                              <CustomTextField
                                id={`record-${i}`}
                                label="Record"
                                name={`targetGroup${i}-record`}
                                value={arms.record}
                                onChange={(e: any) => fireArmsChange(i, "record", e.target.value)}
                                fullWidth
                              />
                            </FormControl>
                          </Grid>
                          <Grid item xs={6} lg={4}>
                            <FormControl fullWidth>
                              <CustomTextField
                                id={`sighter-${i}`}
                                label="Sighter"
                                name={`targetGroup${i}-sighter`}
                                value={arms.sighter}
                                onChange={(e: any) => fireArmsChange(i, "sighter", e.target.value)}
                                fullWidth
                              />
                            </FormControl>
                          </Grid>
                        </Grid>
                      );
                    })}
                  </Paper>
                </FormGroup>
              </Card>
            </Grid>
          )}

          <Box sx={{ display: "flex", justifyContent: "flex-end", margin: 5 }}>
            <Button type="submit" variant="contained" onClick={handleNext} color="primary">
              Submit
            </Button>
          </Box>
        </form>
      </BlankCard>
    </>
  );
};

export default AddEventGroup;
































































import React, { useState, useEffect } from "react";
import { Box } from "@mui/material";
import Scrollbar from "./custom-scroll/Scrollbar";
import CustomTextField from "src/utils/theme-elements/CustomTextField";
import { useDispatch, useSelector } from "../store/Store";
import { setInputValuesForTitles } from "src/store/eventgroups/addEventGroupFormSlice";

interface NumberDropdownProps {
  numberToShow: number;
  field: string;
}

const NumberDropdown: React.FC<NumberDropdownProps> = ({ numberToShow, field }) => {
  const eventData = useSelector((state) => state.addEventGroupForm.eventData);
  console.log(eventData, "in numbrr");
  const dispatch = useDispatch();
  const [inputValues, setInputValues] = useState<string[]>([]);
  // console.log(numberToShow, "ser");
  useEffect(() => {
    setInputValues(Array.from({ length: numberToShow }, (_, index) => (index + 1).toString()));
  }, [numberToShow]);

  const handleInputChange = (index: number, value: string) => {
    const newInputValues = [...inputValues];
    newInputValues[index] = value;
    setInputValues(newInputValues);
    dispatch(setInputValuesForTitles({ field, seriestitle: field === "seriesTitles" ? "seriestitle" : "stagetitle", inputValues: newInputValues }));
  };

  return (
    <Box>
      <Scrollbar sx={{ height: "60px", mr: 45 }}>
        {inputValues.map((value, index) => (
          <Box key={index + 1} display="flex" alignItems="center" mb={1}>
            <CustomTextField variant="outlined" size="small" value={value} onChange={(e: any) => handleInputChange(index, e.target.value)} />
          </Box>
        ))}
      </Scrollbar>
    </Box>
  );
};

export default NumberDropdown;

